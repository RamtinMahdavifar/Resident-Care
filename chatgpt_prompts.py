import os

import openai
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')


def append_conversation_history(input_text, response_text,
                                conversation_history):
    """
    Append the user's input and the assistant's response to the conversation
    history.

    This function modifies the conversation history in place by adding
    two new entries: one for the user's input and one for the
    assistant's response.

    Parameters:
        - input_text (str): The user's input text.
        - response_text (str): The assistant's generated response text.
        - conversation_history (list): The history of the conversation to which
          the new interaction will be appended. Each item in the list is a
          dict with 'role' (either 'user' or 'assistant') and 'content' keys.

    Returns:
        - None
    """
    conversation_history.append({"role": "user", "content": input_text})

    conversation_history.append({
        "role": "assistant",
        "content": response_text
    })


def generate_response(input_text,
                      conversation_history,
                      is_save_conversation_history=True):
    """
    Generate a response to the input text using OpenAI's GPT model and
    optionally append the interaction to the conversation history.

    Parameters:
        - input_text (str): The user's input text to respond to.
        - conversation_history (list): The history of the conversation, each
          item being a dict with 'role' and 'content' keys.
        - is_save_conversation_history (bool, optional): Flag indicating
          whether to save this interaction (input and response) to the
          conversation history. Defaults to True.

    Returns:
        - str: The generated response text.
    """
    messages = [
        {"role": "system", "content": "You are a helpful assistant named "
                                      "CareBot. Your duty is to assist\
        hospital or nursing home Residents. You responsibilities include \
        conversing with the Resident, determining if they require urgent "
                                      "assistance, determining if the Resident"
                                      "has the intend to end the conversation"
                                      "while conversing and summarizing "
                                      "conversation history to be sent to a"
                                      "Caregiver"},
    ]

    messages.extend(conversation_history)
    messages.append({"role": "user", "content": input_text})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=1000,
        n=1,
        stop=None,
        temperature=1.3,
    )

    response_text = response['choices'][0]['message']['content']

    if is_save_conversation_history:
        append_conversation_history(input_text,
                                    response_text,
                                    conversation_history)

    return response_text


def is_urgent_assistance_needed(input_text):
    """
     Determines whether the input text indicates a situation where urgent
     assistance is needed, based on the response from a generated response
     function.

     This function constructs a prompt to assess the urgency of assistance
     required based on the input text. It specifically asks for a
     determination of whether the situation described in the input text
     signifies an urgent health-related need fora Resident.

     The function then relies on a response generated by chatGPT to this
     prompt, interpreting the string "true" (case insensitive) in the
     response as an indication of urgency.

     Parameters:
     - input_text (str): Text describing a situation involving a Resident,
        which is to be evaluated for urgency.

     Returns:
     - bool: True if the generated response indicates an urgent need for
            assistance,
       False otherwise.
     """

    prompt = "Reply back true if the input text below indicates a situation " \
             "where the Resident requires urgent assistance. Anything " \
             "related " \
             "to the health of the Resident signifies urgent need for " \
             "assistance. " \
             "Otherwise reply " \
             "back false. Only Reply true or false, do not respond back " \
             "with " \
             "anything else." \
             "Input Text: " + input_text

    response = generate_response(prompt, [], False)
    if "true" in response.lower():
        return True
    else:
        return False


def is_intent_to_end_conversation(input_text):
    """
    Determines whether the input text indicates an intent by the Resident
    to end the conversation, based on the response from a generated response
    function.

    This function constructs a prompt that asks whether the provided input text
    signifies an intent by the Resident to conclude the conversation. Examples
    of such intent include phrases like "goodbye", "I don't want to talk to
    you anymore", and "no thanks bye". The function then interprets a
    response containing the string "true", in a case-insensitive manner, as an
    indication that the intent is indeed to end the conversation.

    Parameters:
    - input_text (str): Text that is being evaluated for signs of intent to
        end the conversation.

    Returns:
    - bool: True if the generated response suggests an intent to end the
        conversation,
        False otherwise.
    """
    prompt = "Reply back true if the Input Text below " \
             "indicate if the Resident has the indent to end the " \
             "conversation. Otherwise reply back false" \
             "" \
             "An examples of the intend to end conversation " \
             "are goodbye, I don't want to talk to you anymore, " \
             "no thanks bye." \
             "Only Reply true or false, do not respond back " \
             "with " \
             "anything else. " \
             "Input Text: " + input_text
    response = generate_response(prompt, [], False)
    if "true" in response.lower():
        return True
    else:
        return False


def summarize_conversation_history(conversation_history):
    """
    Summarizes conversation history with chat GPT in a short concise manner

    Parameters:
    input_text (str): The user's input text to respond to.
    conversation_history (list): The history of the conversation.

    Returns:
        -str: The generated response text.
    """

    prompt = "Summarize the conversation history you had with the  \
                 Resident in clear concise and nicely formatted  manner. \
                 This information will be sent to a nurse or caregiver"

    return generate_response(prompt, conversation_history, False)
